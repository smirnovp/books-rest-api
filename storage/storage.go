package storage

import (
	"books-rest-api/config"
	"books-rest-api/models"
	"database/sql"

	_ "github.com/lib/pq" // ...
)

// Storage ...
type Storage struct {
	config *config.StorageConfig
	db     *sql.DB
}

// New ...
func New(c *config.StorageConfig) *Storage {
	return &Storage{
		config: c,
	}
}

/*
CREATE DATABASE books_rest_api;

CREATE TABLE Books (
    id    integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    title  varchar(255) NOT NULL,
    author varchar(255) NOT NULL,
    ISBN varchar(255) NOT NULL
);
*/

// GetAll ...
func (stor *Storage) GetAll() (models.Books, error) {
	var books models.Books
	rows, err := stor.db.Query("SELECT * FROM books")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	for rows.Next() { // считываем построчно данные
		var book models.Book

		err := rows.Scan(&book.ID, &book.Title, &book.Author, &book.ISBN)
		if err != nil {
			return nil, err
		}

		books = append(books, book)
	}

	return books, nil
}

// Add ...
func (stor *Storage) Add(b models.Book) (int64, error) {
	var id int64
	res := stor.db.QueryRow("INSERT INTO books (title, author, isbn) VALUES ($1, $2, $3) RETURNING id", b.Title, b.Author, b.ISBN)
	err := res.Scan(&id)
	return id, err
}

// Delete ...
func (stor *Storage) Delete(id int64) (int64, error) {
	res, err := stor.db.Exec("DELETE FROM books WHERE id=$1", id)
	if err != nil {
		return 0, err
	}
	return res.RowsAffected()
}

// Update ...
func (stor *Storage) Update(id int64, b models.Book) (int64, error) {
	res, err := stor.db.Exec("UPDATE books SET (title,author,isbn)=($1,$2,$3) WHERE id=$4", b.Title, b.Author, b.ISBN, id)
	if err != nil {
		return 0, err
	}
	return res.RowsAffected()
}

// Open ...
func (stor *Storage) Open() error {
	db, err := sql.Open("postgres", stor.config.DatabaseURL)
	if err != nil {
		return err
	}

	if err := db.Ping(); err != nil {
		return err
	}

	stor.db = db

	return nil
}

// Close ...
func (stor *Storage) Close() error {
	return stor.db.Close()
}
